import calendar
from datetime import datetime

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackQueryHandler, MessageHandler, filters, ContextTypes


class Calendar:
    def __init__(self, db):
        self.db = db

    def create_calendar(self, user_id, year, month):
        now = datetime.now()
        today = now.day

        markup = [
            [
                InlineKeyboardButton(
                    f"{calendar.month_name[month]} {year}", callback_data="ignore"
                )
            ]
        ]

        week_days = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
        markup.append(
            [InlineKeyboardButton(day, callback_data="ignore") for day in week_days]
        )

        # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞ (0 - –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, 6 - –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ)
        first_day_of_month = calendar.weekday(year, month, 1)

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º –º–µ—Å—è—Ü–µ
        prev_month = month - 1 if month > 1 else 12
        prev_year = year if month > 1 else year - 1
        days_in_prev_month = calendar.monthrange(prev_year, prev_month)[1]

        # –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–Ω–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
        row = []
        for i in range(first_day_of_month):
            prev_day = days_in_prev_month - first_day_of_month + i + 1
            row.append(InlineKeyboardButton(str(prev_day), callback_data="ignore"))

        # –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–Ω–∏ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
        for day in range(1, calendar.monthrange(year, month)[1] + 1):
            date = f"{year}-{month:02d}-{day:02d}"
            event = self.db.get_event(user_id, date)

            display_day = str(day)
            symbol = ""

            if day == today and now.month == month and now.year == year:
                symbol += "‚ô¨"

            if event is not None:
                symbol += "‚òº" if event else "‚òΩ"  # –ö—Ä—É–≥ –¥–ª—è –¥–Ω—è, –ø–æ–ª—É–º–µ—Å—è—Ü –¥–ª—è –Ω–æ—á–∏

            display_text = f"{display_day}{symbol}"
            row.append(
                InlineKeyboardButton(
                    display_text, callback_data=f"day_{year}_{month}_{day}"
                )
            )

            if len(row) == 7:
                markup.append(row)
                row = []

        if row:
            next_month_day = 1
            while len(row) < 7:
                row.append(
                    InlineKeyboardButton(str(next_month_day), callback_data="ignore")
                )
                next_month_day += 1
            markup.append(row)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Å–æ–±—ã—Ç–∏—è
        last_four_events = self.db.get_last_four_events(user_id, year, month)

        if last_four_events == [0, 0, 1, 1]:
            markup.append(
                [
                    InlineKeyboardButton(
                        "–ó–∞–ø–æ–ª–Ω–∏—Ç—å –¥–æ –∫–æ–Ω—Ü–∞ –º–µ—Å—è—Ü–∞?",
                        callback_data=f"fill_month_{year}_{month}",
                    )
                ]
            )

            # –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
        all_events = self.db.get_events(user_id, year, month)
        print(all_events)
        if all_events:
            markup.append(
                [
                    InlineKeyboardButton(
                        "–û—á–∏—Å—Ç–∏—Ç—å —Å–º–µ–Ω—ã –∑–∞ –º–µ—Å—è—Ü",
                        callback_data=f"clear_events_{year}_{month}",
                    )
                ]
            )

        markup.append(
            [
                InlineKeyboardButton("<<", callback_data=f"prev_{year}_{month}"),
                InlineKeyboardButton(">>", callback_data=f"next_{year}_{month}"),
            ]
        )

        return InlineKeyboardMarkup(markup)

    def create_day_night_keyboard(self, user_id, year, month, day):
        date = f"{year}-{month:02d}-{day:02d}"
        event = self.db.get_event(user_id, date)

        keyboard = [
            [
                InlineKeyboardButton(
                    "‚òÄÔ∏è –î–µ–Ω—å", callback_data=f"add_day_{year}_{month}_{day}"
                ),
                InlineKeyboardButton(
                    "üåô –ù–æ—á—å", callback_data=f"add_night_{year}_{month}_{day}"
                ),
            ]
        ]

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–£–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ", –µ—Å–ª–∏ –æ–Ω–æ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if event is not None:
            keyboard.append(
                [
                    InlineKeyboardButton(
                        "‚ùå –£–¥–∞–ª–∏—Ç—å —Å–º–µ–Ω—É",
                        callback_data=f"delete_event_{year}_{month}_{day}",
                    )
                ]
            )

        keyboard.append(
            [InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data=f"cancel_{year}_{month}")]
        )
        return InlineKeyboardMarkup(keyboard)

    async def edit_message(self, query, text, reply_markup):
        try:
            await query.edit_message_text(text, reply_markup=reply_markup)
        except Exception as e:
            print(f"Error editing message: {e}")
            await query.edit_message_reply_markup(reply_markup=reply_markup)

    async def calendar_command(
        self, update: Update, context: ContextTypes.DEFAULT_TYPE
    ):
        now = datetime.now()
        user_id = update.effective_user.id
        await update.message.reply_text(
            "–ö–æ–≥–¥–∞ –Ω–∞ –∑–∞–≤–æ–¥?",
            reply_markup=self.create_calendar(user_id, now.year, now.month),
        )

    async def calendar_callback(self, update: Update, context):
        query = update.callback_query
        user_id = query.from_user.id

        if query.data.startswith("day"):
            _, year, month, day = query.data.split("_")
            year, month, day = int(year), int(month), int(day)
            await self.edit_message(
                query,
                f"{day}.{month}.{year} —Å–º–µ–Ω–∞ –≤ ",
                self.create_day_night_keyboard(user_id, year, month, day),
            )
            return

        if query.data.startswith("add_day") or query.data.startswith("add_night"):
            _, is_day, year, month, day = query.data.split("_")
            year, month, day = int(year), int(month), int(day)
            date = f"{year}-{month:02d}-{day:02d}"
            self.db.add_event(user_id, date, is_day == "day")
            event_type = "–î–Ω–µ–≤–Ω–æ–π" if is_day == "day" else "–ù–æ—á–Ω–æ–π"
            await query.answer(f"{event_type} –∑–∞–≤–æ–¥ –±—É–¥–µ—Ç {day}.{month}.{year}")
            await self.edit_message(
                query, "–ö–æ–≥–¥–∞ –Ω–∞ –∑–∞–≤–æ–¥?", self.create_calendar(user_id, year, month)
            )
            return

        if query.data.startswith("clear_events"):
            parts = query.data.split("_")
            if len(parts) == 4:
                _, _, year, month = parts
                year, month = int(year), int(month)
                self.db.delete_events_for_month(user_id, year, month)
                await query.answer(f"–£–¥–∞–ª–µ–Ω–æ")
                await self.edit_message(
                    query, "–ö–æ–≥–¥–∞ –Ω–∞ –∑–∞–≤–æ–¥?", self.create_calendar(user_id, year, month)
                )
                return
            else:
                await query.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.")
                return

        if query.data.startswith("fill_month"):
            parts = query.data.split("_")
            if len(parts) == 4:
                _, _, year, month = parts
                year, month = int(year), int(month)

                # –ó–∞–ø–æ–ª–Ω—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –¥–Ω–∏ –º–µ—Å—è—Ü–∞ –ø–æ —à–∞–±–ª–æ–Ω—É: 4 –ø—Ä–æ–ø—É—Å–∫–∞, 2 –¥–Ω—è, 2 –Ω–æ—á–∏
                num_days = calendar.monthrange(year, month)[1]
                last_event = self.db.get_last_event(user_id, year, month)
                last_event_date = datetime.strptime(last_event[1], "%Y-%m-%d")
                day_counter = last_event_date.day + 5
                skip_counter = 4  # –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º 4 –¥–Ω—è

                while day_counter <= num_days:
                    if skip_counter < 4:
                        skip_counter += 1
                    elif skip_counter < 6:
                        date = f"{year}-{month:02d}-{day_counter:02d}"
                        self.db.add_event(user_id, date, True)  # True - –¥–Ω–µ–≤–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
                        skip_counter += 1
                    elif skip_counter < 8:
                        date = f"{year}-{month:02d}-{day_counter:02d}"
                        self.db.add_event(user_id, date, False)
                        skip_counter += 1
                        if skip_counter == 8:
                            skip_counter = 0
                    else:
                        skip_counter = 0

                    day_counter += 1

                await query.answer("–ú–µ—Å—è—Ü –∑–∞–ø–æ–ª–Ω–µ–Ω –ø–æ —à–∞–±–ª–æ–Ω—É.")
                await self.edit_message(
                    query, "–ö–æ–≥–¥–∞ –Ω–∞ –∑–∞–≤–æ–¥?", self.create_calendar(user_id, year, month)
                )
                return
            else:
                await query.answer("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.")
                return

        if query.data.startswith("delete_event"):
            _, _, year, month, day = query.data.split("_")
            year, month, day = int(year), int(month), int(day)
            date = f"{year}-{month:02d}-{day:02d}"
            if self.db.delete_event(user_id, date):
                await query.answer(f"–ó–∞–≤–æ–¥ –Ω–∞ {day}.{month}.{year} —É–¥–∞–ª–µ–Ω.")
            else:
                await query.answer(f"–ó–∞–≤–æ–¥–∞ –Ω–∞ {day}.{month}.{year} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            await self.edit_message(
                query, "–ö–æ–≥–¥–∞ –Ω–∞ –∑–∞–≤–æ–¥?", self.create_calendar(user_id, year, month)
            )
            return

        if query.data.startswith("prev") or query.data.startswith("next"):
            _, year, month = query.data.split("_")
            year, month = int(year), int(month)
            if query.data.startswith("prev"):
                month -= 1
                if month < 1:
                    month = 12
                    year -= 1
            else:  # next
                month += 1
                if month > 12:
                    month = 1
                    year += 1
        elif query.data.startswith("cancel"):
            _, year, month = query.data.split("_")
            year, month = int(year), int(month)
        else:
            await query.answer()
            return

        await self.edit_message(
            query, "–ö–æ–≥–¥–∞ –Ω–∞ –∑–∞–≤–æ–¥?", self.create_calendar(user_id, year, month)
        )

    @classmethod
    def setup(cls, application, db):
        calendar_instance = cls(db)

        application.add_handler(
            MessageHandler(
                filters.Text(["–ö–∞–ª–µ–Ω–¥–∞—Ä—å"]), calendar_instance.calendar_command
            )
        )
        application.add_handler(
            CallbackQueryHandler(calendar_instance.calendar_callback)
        )
